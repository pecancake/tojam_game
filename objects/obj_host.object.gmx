<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize

// State
state=s.idle

// Variables
chunk_list=ds_list_create()
tick_rate=40//room_speed

player_name='player test name'
enemy_name='Enemy man guy'

player_hp_current=200
player_hp_max=200

enemy_hp_current=300
enemy_hp_max=300

pip_hit=0
pip_count=0
hits=0
percentage_hit=0
combo=0

move_type='attack'

// Inits
create_pattern_chunks()
create_enums()

// Objects
instance_create(0,0,obj_hud_options)
instance_create(0,0,obj_hud_button_attack)
instance_create(0,0,obj_hud_button_heal)
instance_create(0,0,obj_hud_healthbar_player)
instance_create(0,0,obj_hud_healthbar_enemy)
instance_create(0,0,obj_hud_player)
instance_create(0,0,obj_hud_enemy)
instance_create(0,0,obj_hud_stats)

show_debug_overlay(true)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Debug

if keyboard_check_pressed(vk_space)
{
    if !instance_exists(obj_notes)
    {
        instance_create(300,300,obj_notes)
        state=s.notes
    }
    else
    {
        obj_notes.close=true
        state=s.idle
    }
}

tick_rate+=(keyboard_check_pressed(ord('0'))-keyboard_check_pressed(ord('9')))*5

if keyboard_check_pressed(ord('9')) or keyboard_check_pressed(ord('0'))
{
    show_debug_message('tick rate changed to: '+string(tick_rate))
}

if keyboard_check_pressed(ord('1'))
{
    dmg=irandom_range(2,20)
    player_hp_current-=dmg
    create_healthbar_chunk('player',dmg)
}

if keyboard_check(ord('2'))
{
    player_hp_current+=1
}

if keyboard_check_pressed(ord('4'))
{
    dmg=irandom_range(2,20)
    enemy_hp_current-=dmg
    create_healthbar_chunk('enemy',dmg)
}

if keyboard_check(ord('5'))
{
    enemy_hp_current+=1
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Clamping
player_hp_current=clamp(player_hp_current,0,player_hp_max)
enemy_hp_current=clamp(enemy_hp_current,0,enemy_hp_max)

tick_rate=clamp(tick_rate,1,room_speed)
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// GUI
switch(state)
{    
    case s.idle:
    {
        // Options Background
        obj_hud_options.target_x=300
        obj_hud_options.target_y=550
        
        // Buttons
        obj_hud_button_attack.target_x=154
        obj_hud_button_attack.target_y=550
        obj_hud_button_heal.target_x=446
        obj_hud_button_heal.target_y=550
        
        // Healthbars
        obj_hud_healthbar_player.state=s.top
        obj_hud_healthbar_enemy.state=s.top        
        
        // Models
        obj_hud_player.target_x=140
        obj_hud_player.target_y=350
        obj_hud_enemy.target_x=460
        obj_hud_enemy.target_y=350
        
        obj_hud_stats.show=false            
    }break
    
    case s.notes:
    {
        obj_hud_options.target_y=650
        
        obj_hud_button_attack.target_y=650
        obj_hud_button_heal.target_y=650
        
        obj_hud_healthbar_player.state=s.notes
        obj_hud_healthbar_enemy.state=s.notes
        
        obj_hud_player.target_x=100
        obj_hud_player.target_y=330
        obj_hud_enemy.target_x=500
        obj_hud_enemy.target_y=330
        
        obj_hud_stats.show=true        
    }break
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Pip hits

if pip_hit&gt;0
{
    dmg=0
    
    repeat(pip_hit)
    {
        dmg+=1+round(combo/5)
    }
        
    dmg_notify(obj_hud_enemy.x+random_range(-30,30),obj_hud_enemy.y-150,dmg)
    enemy_hp_current-=dmg
    create_healthbar_chunk('enemy',dmg)
    
    if move_type='attack' // Change to defend
    {
        obj_hud_enemy.sprite_index=choose(spr_hud_enemy_attack0,spr_hud_enemy_attack1,spr_hud_enemy_attack2,spr_hud_enemy_attack3)
        obj_hud_enemy.image_index=0
        obj_hud_enemy.image_speed=0.6
    }
    pip_hit=0
}

if pip_hit&lt;0
{
    dmg=0
    
    repeat(abs(pip_hit))
    {
        dmg+=irandom_range(0,5)
    }
    
    if move_type='attack'
    {
        obj_hud_player.sprite_index=choose(spr_hud_player_attack0,spr_hud_player_attack1,spr_hud_player_attack2,spr_hud_player_attack3)
        obj_hud_player.image_index=0
        obj_hud_player.image_speed=0.6
    }
    dmg_notify(obj_hud_player.x+random_range(-30,30),obj_hud_player.y-150,dmg)
    player_hp_current-=dmg
    create_healthbar_chunk('player',dmg)
    pip_hit=0
}

percentage_hit=string_format(hits/pip_count*100,4,2)

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
